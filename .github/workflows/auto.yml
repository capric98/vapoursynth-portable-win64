name: Auto

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    paths:
      - 'config/*.txt'
      - '.github/workflows/auto.yml'

jobs:


  update:
    runs-on: ubuntu-latest
    outputs:
      outdated: ${{ steps.judge.outputs.outdated }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Check Configs
        id: ls
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          export flag="no"
          for f in ${ALL_CHANGED_FILES}; do
            echo -n "\"${f}\" changed!   "
            if [[ "${f}" =~ (config/.*.txt|.github/workflows/auto.yml) ]]; then
              echo -n "❕"
              export flag="yes"
            fi
            echo ""
          done
          if [[ "${flag}" == "yes" ]]; then
            echo "config-changed: true"
            # echo "::set-output name=config-changed::true"
            echo "config-changed=true" >> $GITHUB_OUTPUT
          else
            echo "config-changed: false"
            # echo "::set-output name=config-changed::false"
            echo "config-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Updates
        id: check
        run: |
          python -m pip install --upgrade pip
          pip install requests
          MESSAGE=$(python update.py)
          git config --local user.name 'github-actions'
          git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "config-outdated: true"
            # echo "::set-output name=config-outdated::true"
            echo "config-outdated=true" >> $GITHUB_OUTPUT
            git commit -am "${MESSAGE} by actions"
            git push
          else
            echo "config-outdated: false"
            # echo "::set-output name=config-outdated::false"
            echo "config-outdated=false" >> $GITHUB_OUTPUT
          fi

      - name: Judge
        id: judge
        run: |
          if [[ "${{ steps.ls.outputs.config-changed }}" == "true" ]] || [[ "${{ steps.check.outputs.config-outdated }}" == "true" ]]; then
            echo "outdated: true"
            # echo "::set-output name=outdated::true"
            echo "outdated=true" >> $GITHUB_OUTPUT
          else
            echo "outdated: false"
            # echo "::set-output name=outdated::false"
            echo "outdated=false" >> $GITHUB_OUTPUT
          fi


  build:
    needs: update
    if: ${{ needs.update.outputs.outdated == 'true' }}

    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Config
        run: |
          python -m pip install requests
          python update.py

      - name: Install Python
        run: |
          mkdir build && mkdir tmp
          cp bootstrap.* build/
          export py_version=$(cat config/Python.txt)
          curl -fSL "https://www.python.org/ftp/python/${py_version}/python-${py_version}-embed-amd64.zip" -o tmp/python-${py_version}-embed.zip
          unzip tmp/python-${py_version}-embed.zip -d build/Python3
          sed -i "s|#import site|import site|g" $(ls build/Python3/*._pth)

      - name: Install Pip&cython
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          curl -fSL "https://bootstrap.pypa.io/get-pip.py" -o tmp/get-pip.py
          python tmp/get-pip.py
          pip install cython

      - name: Install VapourSynth
        run: |
          export vs_version=$(cat config/VapourSynth.txt)
          export vs_compact_version=$(python -c "print('$(cat config/VapourSynth.txt)'.split('-')[0], end='')")
          curl -fSL "https://github.com/vapoursynth/vapoursynth/releases/download/${vs_version}/VapourSynth64-Portable-${vs_compact_version}.zip" -o tmp/VapourSynth64-Portable-${vs_version}.zip
          7z x tmp/VapourSynth64-Portable-${vs_version}.zip -obuild/Python3 -aos

          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          export py_mm_version=$(python -c "print(''.join('$(cat config/Python.txt)'.split('.')[:2]), end='')")
          export vs_s_version=$(python -c "print('${vs_version}'[1:], end='')")

          python -m pip install $(pwd)/build/Python3/wheel/VapourSynth-${vs_s_version}-cp${py_mm_version}-cp${py_mm_version}-win_amd64.whl

          VSPipe -v

      - name: Install Packages
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}

          git clone https://github.com/vapoursynth/vsrepo
          # sed -i "/del vapoursynth_path/a\    pluginparent  = os.path.join(base_path, 'vapoursynth64' if is_64bits else 'vapoursynth32')" vsrepo/vsrepo.py

          repo_list="$(cat config/Scripts.txt) $(cat config/Plugins.txt)"
          repo_list=$(sed -e "s/^[ \n\t\r]+/ /"<<<"${repo_list}")

          python vsrepo/vsrepo.py update
          python vsrepo/vsrepo.py install ${repo_list} -s build/Python3/Lib/site-packages

      - name: Zip
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          export py_version=$(cat config/Python.txt)
          export vs_version=$(cat config/VapourSynth.txt)

          rm -rf tmp
          rm -rf build/Python3/doc
          rm -rf $(find . -name __pycache__ -print0 | xargs -0 echo)

          cd build
          python ../zip-r.py ../VapourSynth64-Portable-${vs_version}.zip *
          cd ..

          date_utc=$(echo -e "from datetime import datetime\nprint(datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\"))" | python)
          # release_name="v0.${py_version//.}.${vs_version//[RC]}"
          # release_tagname="v0.${py_version//.}.${vs_version//[RC]}+${GITHUB_SHA::7}"
          release_name="${vs_version} [${py_version}]"
          release_tagname="${vs_version}+${GITHUB_SHA::7}"

          # echo "RELEASE_NAME=${release_name//-/.}" >> $GITHUB_ENV
          # echo "RELEASE_TAGNAME=${release_tagname//-/.}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV
          echo "RELEASE_TAGNAME=${release_tagname}" >> $GITHUB_ENV
          echo "RELEASE_FILENAME=VapourSynth64-Portable-${vs_version}.zip" >> $GITHUB_ENV

          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          # echo "### Info" >> $GITHUB_ENV
          # echo "|Library|Version|" >> $GITHUB_ENV
          # echo "|:---:|:---:|" >> $GITHUB_ENV
          # echo "|Python|${py_version}|" >> $GITHUB_ENV
          # echo "VapourSynth|${vs_version}|" >> $GITHUB_ENV
          # echo "" >> $GITHUB_ENV
          echo "\`${date_utc}\`" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo -e "print('RELEASE_TYPE={}'.format('prerelease' if 'RC' in '${vs_version}'.upper() or 'TEST' in '${vs_version}'.upper() else 'release'))" | python >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.RELEASE_TAGNAME }}
          body: ${{ env.RELEASE_BODY }}
          files: ${{ env.RELEASE_FILENAME }}
          prerelease: ${{ env.RELEASE_TYPE == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo
          path: .
        if: success() || failure()
