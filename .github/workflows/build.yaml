name: Build

on:
  push:
    paths:
      - "config/*.txt"
      - ".github/workflows/*.yml"
      - ".github/workflows/*.yaml"

jobs:
  check:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        run: |
          mkdir build && mkdir tmp && cp bootstrap.bat build/bootstrap.bat
          export py_version=$(cat config/Python.txt)
          curl -fSL "https://www.python.org/ftp/python/${py_version}/python-${py_version}-embed-amd64.zip" -o tmp/python-${py_version}-embed.zip
          unzip tmp/python-${py_version}-embed.zip -d build/Python3
          sed -i "s|#import site|import site|g" $(ls build/Python3/*._pth)

      - name: Install pip&cython
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          curl -fSL "https://bootstrap.pypa.io/get-pip.py" -o tmp/get-pip.py
          python tmp/get-pip.py
          pip install cython

      - name: Install VapourSynth
        run: |
          export vs_version=$(cat config/VapourSynth.txt)
          curl -fSL "https://github.com/vapoursynth/vapoursynth/releases/download/${vs_version}/VapourSynth64-Portable-${vs_version}.7z" -o tmp/VapourSynth64-Portable-${vs_version}.7z
          7z x tmp/VapourSynth64-Portable-${vs_version}.7z -obuild/Python3 -aos

          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          VSPipe -v

      - name: Install VSRepo
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          git clone https://github.com/vapoursynth/vsrepo tmp/vsrepo
          cd tmp/vsrepo
          python setup.py install
          cd ../../

      - name: Install Packages
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}

          repo_list="$(cat config/Scripts.txt) $(cat config/Plugins.txt)"
          repo_list=$(sed -e "s/^[ \n\t\r]+/ /"<<<"${repo_list}")

          vsrepo update -p
          vsrepo install ${repo_list} -p

      - name: Zip
        run: |
          export PATH=$(pwd)/build/Python3:$(pwd)/build/Python3/Scripts:${PATH}
          export py_version=$(cat config/Python.txt)
          export vs_version=$(cat config/VapourSynth.txt)

          cd build
          rm -rf Python3/doc
          rm -rf $(find . -name __pycache__ -print0 | xargs -0 echo)
          python ../zip-r.py ../VapourSynth64-Portable-${vs_version}.zip *
          cd ..

          date_utc=$(echo -e "from datetime import datetime\nprint(datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\"))" | python)
          release_name="v0.${py_version//.}.${vs_version//[RC]}"
          release_tagname="v0.${py_version//.}.${vs_version//[RC]}+${GITHUB_SHA::7}"

          echo "RELEASE_NAME=${release_name//-/.}" >> $GITHUB_ENV
          echo "RELEASE_TAGNAME=${release_tagname//-/.}" >> $GITHUB_ENV
          echo "RELEASE_FILENAME=VapourSynth64-Portable-${vs_version}.zip" >> $GITHUB_ENV

          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "### Info" >> $GITHUB_ENV
          echo "|Library|Version|" >> $GITHUB_ENV
          echo "|:---:|:---:|" >> $GITHUB_ENV
          echo "|Python|${py_version}|" >> $GITHUB_ENV
          echo "VapourSynth|${vs_version}|" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "\`${date_utc}\`" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: artifacts
      #     path: build

      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: ${{ env.RELEASE_NAME }}
      #     tag_name: ${{ env.RELEASE_TAGNAME }}
      #     body: ${{ env.RELEASE_BODY }}
      #     files: ${{ env.RELEASE_FILENAME }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact for Debugging
        uses: actions/upload-artifact@v3
        with:
          name: repo
          path: .
        if: success() || failure()
